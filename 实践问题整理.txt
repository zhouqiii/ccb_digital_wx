1.初始化一个hello world小程序
答：(a)npm init 配置package.js文件
	(b)npm install --production 安装node_modules
	(c)在npm i @vant/weapp -S --production安装vant
	(d)将 app.json 中的 "style": "v2" 去除，小程序的新版基础组件强行加上了许多样式，难以覆盖，不关闭将造成部分组件样式混乱。
	(e)手动在 project.config.json 内添加如下配置:
		{
		  ...
		  "setting": {
			...
			"packNpmManually": true,
			"packNpmRelationList": [
			  {
				"packageJsonPath": "./package.json",
				"miniprogramNpmDistDir": "./"
			  }
			]
		  }
		}
	(f)在微信开发者工具中点击工具->构建npm然后就会构建miniprogram_npm文件夹
	(g)在app.json文件中配置usingComponents单独引入需要使用的组件就可以
2.全局配置less
	(a)在VScode编辑器的扩展下载一个easy less扩展
	(b)打开微信开发者工具，点击代码左侧的扩展，然后点击扩展右边的三个点，选择最下面的从已解包的扩展文件夹安装
	(c)先去看一下VScode安装在哪个目录 选择VScode里面的data,里面的extensions文件夹里面找到刚才在vacode下载的插件mrcrowl.easy.less文件，选中
	(d)打开微信开发者工具,点击导航栏的设置，点击扩展设置->点上面的编辑器，然后点击下面的更多编辑器设置…
	(e)之后会出来一个设置页面，在左侧目录点击扩展，找到里面的Easy LESS configur…点击，再点击右边出现的在settings.json中编辑
	(f)在代码中less.compile里面写入下面四行代码:
		"less.compile": {
			"compress": false,
			"sourceMap": false,
			"out": true,
			"outExt": ".wxss"
		}
	
	保存之后，在page的每个文件夹下除了建立.json .js .wxss .wxml 文件，在新建一个.less文件，把样式写在less文件中保存他就会自动把在less里面的样式转换到wxss文件去了
3.封装一个request
	const baseURL = 'http://128.194.224.137:8989/ccb-server/wechatApplet';
	const header = {
		"Content-Type": 'application/json;charset=UTF-8';
	}
	const request = (url, method, data, showLoading = true) => {
		if(showLoading){
			wx.showLoading({title: '加载中'})
		}
		return new Promise((resolve, reject) => {
			wx.request({
				url: `${baseURL}${url}`,
				method: method || 'POST',
				data: data || {},
				header: header,
				success(res){
					resolve(res.data.data)
				},
				fail(err){
					wx.showToast({
						title: '服务异常'，
						icon: 'error',
						duration: '1500'
					})
					reject(err)
				},
				complete: info => {
					if(showLoading){
						wx.hideLoading()
					}
				}
			})
		})
	}
	const post = (url, data = {}) => {
		return request(url, 'POST', data)
	}
	const get = (url, data = {}) => {
		return request(url, 'GET', data)
	}
	module.export = {
		post,
		get
	}
4.小程序生命周期
5.子页面跳转父页面携带参数，父页面接收参数；子页面跳转父页面触发函数，父页面响应函数；
6.父组件给子组件传值，子组件的要求以及如何接收父组件传的值；子组件给父组件传值，父组件的要求以及如何接收子组件传来的值
7.分包问题
8.路由问题
4.生命周期：
	页面的生命周期：															组件的生命周期：		
		onLoad：生命周期回调-监听页面加载 发送请求获取数据							created：生命周期回调-监听页面加载（这里的this.data就是在Component中定义的数据data，此时不能调用setData）
		onShow: 生命周期回调-监听页面显示 请求数据									attached：生命周期回调-监听页面显示（此时this.data已经被初始化为组件的当前值，绝大多数初始化工作可以在这个时机进行）
		onReady: 生命周期回调-监听页面初次渲染完成 获取页面元素(少用)				ready：生命周期回调-监听页面初次渲染完成
		onHide：生命周期回调-监听页面隐藏 终止任务，如定时器或者播放音乐等			moved：生命周期回调-监听页面隐藏
		//（当使用wx.redictTo()或关闭当前页返回上一页wx.navigateBack()会触发onUnload()）	
		onUnload： 生命周期回调-监听页面卸载 终止任务								detached: 生命周期回调-监听页面卸载
																					error: 每当组件方法抛出错误时执行
	返回上一页：(cur)onUnload() -> (pre)onShow()
	进入下一页：(cur)onHide() -> (next)onLoad() -> (next)onShow() -> (next)onReady()
	PS:还有一些特殊的生命周期，他们并非与组件有很强的关联，但有时组件需要获知，以便组件内部处理，这样的生命周期称为“组件所在页面的生命周期”，在pageLifeTimes定义
		show: 组件所在页面被展示时执行
		hide: 组件所在页面被隐藏时执行
		eg：Component({
			pageLifeTimes: {
				show: function(){},
				hide: function(){}
			}
		})
5.子页面跳转：
	wx.navigateTo({
		//携带参数
		url: `/pages/drill/index?name=XXX&title=XXX` //注意这里页面跳转的url路径写根目录下pages即/pages;这个pages/drill/index要在app.json的路径里写上，然后就可以找到
		//触发函数
		success: function(res){
			res.eventChannel.emit('postData'，{ message: 'postMessage'})
		}
	})
 父页面接收：onLoad: function(option){// 父页面的onLoad()生命周期中接收子页面跳转携带的参数和方法
	//接收参数
	console.log(option.name, option.title)
	//接收方法
	const getOpenerEventChannel = this.getOpenerEventChannel()
	getOpenerEventChannel.on('postData', function(data){
		console.log(data) //{ message: 'postMessage'}
	})
 }
6.父组件给子组件传值：
	与vue传值方式一致，子组件js文件不使用Page({})函数而是Component({}),在json文件注明component属性：“component”：true；
	子组件使用properties接收父组件传来的值，相当于vue的props；
 子组件触发父组件的method： 
	与vue方式一致，只不过vue的子组件触发api是this.$emit('sendFunc', { data: '111' }),这里使用this.triggerEvent('sendFunc', { data: '111' })//这也是子组件给父组件传值的方式
7.分包：
	普通分包：分包后小程序项目一般是由一个主包和多个分包组成，在小程序启动时会默认下载主包并启动主包内页面；普通分包必须依赖于主包才 能运行
		PS：主包不能引用分包内的私有资源，分包可以引用主包内的公共资源；分包之间不能互相引用私有资源
		主包：一般包含项目的启动页和tabbar和所有分包都用到的公共资源
		分包：只包含和当前分包有关的页面和资源
		独立分包：一般把一些具有独立功能性的页面设置为独立分包
	详细的分包步骤参见文档
	独立分包：独立分包可以在不下载主包的情况下，独立运行所以独立分包不能引用主包的资源，其他适用于普通分包的规则都适用于独立分包
9.其他知识点：
 (a)微信小程序使用rpx：
	(1)rpx是小程序中使用的屏幕自适应的尺寸单位，规定屏幕宽为750rpx，可以通过 rpx 设置元素和字体的大小
	(2)计算方式：1 rpx = 屏幕宽度 / 750 px
		eg: iPhone6屏幕宽度为 375 px,那么 1 rpx = 375 px / 750 px = 0.5 px 所以要设置宽为 200px，高为 150px 的盒子时，应该设置其宽400rpx，高300rpx
  (b)获取用户信息：使用自带的bindgetuserinfo API绑定函数，函数回调自带的形参中就包括用户信息
	<button open-type="getUserInfo" bindgetuserinfo="onGetUserInfo"></button>
	open-type属性设置为getUserInfo表示引导用户授权
	onGetUserInfo(e){
		const { userInfo } = e.detail
		console.log(userInfo)//即可获得用户信息
	}